// Code generated by protoc-gen-lightbrother, DO NOT EDIT.

/*
Package api is a generated gin stub package.
This code was generated with protoc-gen-lightbrother. 

It is generated from these files:
	admin.proto
*/
package api

import (
	"github.com/gin-gonic/gin"
	"context"
	"net/http"
)

// to suppressed 'imported but not used warning'

const ADMIN_HTTP_METGOD = "GRPC"

var PathAdminGetConfig = "/most.simple.mcd.Admin/getConfig"
var PathAdminUpdateConfig = "/most.simple.mcd.Admin/updateConfig"
var PathAdminOperatePlugin = "/most.simple.mcd.Admin/operatePlugin"
var PathAdminGetConfigVal = "/most.simple.mcd.Admin/getConfigVal"
var PathAdminRunCommand = "/most.simple.mcd.Admin/runCommand"
var PathAdminGetLog = "/most.simple.mcd.Admin/getLog"
var PathAdminDelTmpFlie = "/most.simple.mcd.Admin/delTmpFlie"
var PathAdminAddUpToContainer = "/most.simple.mcd.Admin/addUpToContainer"
var PathAdminUpMapToMcServer = "/most.simple.mcd.Admin/UpMapToMcServer"
var PathAdminCloseMcd = "/most.simple.mcd.Admin/closeMcd"

// AdminGinServer is the server API for Admin service.
type AdminGinServer interface {
	// 获取配置
	GetConfig(ctx context.Context, req *GetConfigReq) (resp *GetConfigResp, err error)

	// 修改配置
	UpdateConfig(ctx context.Context, req *UpdateConfigReq) (resp *UpdateConfigResp, err error)

	// 服务端插件操作
	OperatePlugin(ctx context.Context, req *OperatePluginReq) (resp *OperatePluginResp, err error)

	// 服务端插件操作
	GetConfigVal(ctx context.Context, req *GetConfigValReq) (resp *GetConfigValResp, err error)

	// 向服务端执行一条命令
	RunCommand(ctx context.Context, req *RunCommandReq) (resp *RunCommandResp, err error)

	// 获取服务端日志
	GetLog(ctx context.Context, req *GetLogReq) (resp *GetLogResp, err error)

	// 删除临时文件
	DelTmpFlie(ctx context.Context, req *DelTmpFlieReq) (resp *DelTmpFlieResp, err error)

	// 获取上传服务端文件，并注入到容器中
	AddUpToContainer(ctx context.Context, req *AddUpToContainerReq) (resp *AddUpToContainerResp, err error)

	// 获取地图信息，并覆盖到对应服务端
	UpMapToMcServer(ctx context.Context, req *AddUpToContainerReq) (resp *AddUpToContainerResp, err error)

	// 关闭mcd
	CloseMcd(ctx context.Context, req *CloseMcdReq) (resp *CloseMcdResp, err error)
}

var apiAdminSvc AdminGinServer

func getConfig(c *gin.Context) {
	p := new(GetConfigReq)
	resp, err := apiAdminSvc.GetConfig(c, p)
	if err != nil {
		c.Set("code", -500)
		c.Set("message", err.Error())
		c.JSON(http.StatusOK, getAdminResponse(c, nil))
		return
	}
	c.JSON(http.StatusOK, getAdminResponse(c, resp))
}

func updateConfig(c *gin.Context) {
	p := new(UpdateConfigReq)
	if err := c.BindJSON(p); err != nil {
		c.Set("code", -500)
		c.Set("message", err.Error())
		c.JSON(http.StatusOK, getAdminResponse(c, nil))
		return
	}
	resp, err := apiAdminSvc.UpdateConfig(c, p)
	if err != nil {
		c.Set("code", -500)
		c.Set("message", err.Error())
		c.JSON(http.StatusOK, getAdminResponse(c, nil))
		return
	}
	c.JSON(http.StatusOK, getAdminResponse(c, resp))
}

func operatePlugin(c *gin.Context) {
	p := new(OperatePluginReq)
	if err := c.BindJSON(p); err != nil {
		c.Set("code", -500)
		c.Set("message", err.Error())
		c.JSON(http.StatusOK, getAdminResponse(c, nil))
		return
	}
	resp, err := apiAdminSvc.OperatePlugin(c, p)
	if err != nil {
		c.Set("code", -500)
		c.Set("message", err.Error())
		c.JSON(http.StatusOK, getAdminResponse(c, nil))
		return
	}
	c.JSON(http.StatusOK, getAdminResponse(c, resp))
}

func getConfigVal(c *gin.Context) {
	p := new(GetConfigValReq)
	if err := c.BindJSON(p); err != nil {
		c.Set("code", -500)
		c.Set("message", err.Error())
		c.JSON(http.StatusOK, getAdminResponse(c, nil))
		return
	}
	resp, err := apiAdminSvc.GetConfigVal(c, p)
	if err != nil {
		c.Set("code", -500)
		c.Set("message", err.Error())
		c.JSON(http.StatusOK, getAdminResponse(c, nil))
		return
	}
	c.JSON(http.StatusOK, getAdminResponse(c, resp))
}

func runCommand(c *gin.Context) {
	p := new(RunCommandReq)
	if err := c.BindJSON(p); err != nil {
		c.Set("code", -500)
		c.Set("message", err.Error())
		c.JSON(http.StatusOK, getAdminResponse(c, nil))
		return
	}
	resp, err := apiAdminSvc.RunCommand(c, p)
	if err != nil {
		c.Set("code", -500)
		c.Set("message", err.Error())
		c.JSON(http.StatusOK, getAdminResponse(c, nil))
		return
	}
	c.JSON(http.StatusOK, getAdminResponse(c, resp))
}

func getLog(c *gin.Context) {
	p := new(GetLogReq)
	apiAdminSvc.GetLog(c, p)
}

func delTmpFlie(c *gin.Context) {
	p := new(DelTmpFlieReq)
	resp, err := apiAdminSvc.DelTmpFlie(c, p)
	if err != nil {
		c.Set("code", -500)
		c.Set("message", err.Error())
		c.JSON(http.StatusOK, getAdminResponse(c, nil))
		return
	}
	c.JSON(http.StatusOK, getAdminResponse(c, resp))
}

func addUpToContainer(c *gin.Context) {
	p := new(AddUpToContainerReq)
	resp, err := apiAdminSvc.AddUpToContainer(c, p)
	if err != nil {
		c.Set("code", -500)
		c.Set("message", err.Error())
		c.JSON(http.StatusOK, getAdminResponse(c, nil))
		return
	}
	c.JSON(http.StatusOK, getAdminResponse(c, resp))
}

func UpMapToMcServer(c *gin.Context) {
	p := new(AddUpToContainerReq)
	resp, err := apiAdminSvc.UpMapToMcServer(c, p)
	if err != nil {
		c.Set("code", -500)
		c.Set("message", err.Error())
		c.JSON(http.StatusOK, getAdminResponse(c, nil))
		return
	}
	c.JSON(http.StatusOK, getAdminResponse(c, resp))
}

func closeMcd(c *gin.Context) {
	p := new(CloseMcdReq)
	resp, err := apiAdminSvc.CloseMcd(c, p)
	if err != nil {
		c.Set("code", -500)
		c.Set("message", err.Error())
		c.JSON(http.StatusOK, getAdminResponse(c, nil))
		return
	}
	c.JSON(http.StatusOK, getAdminResponse(c, resp))
}

func RegisterAdminAdminGinServer(e *gin.Engine, server AdminGinServer) {
	apiAdminSvc = server
	e.Handle("POST", PathAdminGetConfig, handleAdminAuthMiddleware, getConfig)
	e.Handle("POST", PathAdminUpdateConfig, handleAdminAuthMiddleware, updateConfig)
	e.Handle("POST", PathAdminOperatePlugin, handleAdminAuthMiddleware, operatePlugin)
	e.Handle("POST", PathAdminGetConfigVal, handleAdminAuthMiddleware, getConfigVal)
	e.Handle("POST", PathAdminRunCommand, handleAdminAuthMiddleware, runCommand)
	e.Handle("POST", PathAdminGetLog, handleAdminAuthMiddleware, getLog)
	e.Handle("POST", PathAdminDelTmpFlie, handleAdminAuthMiddleware, delTmpFlie)
	e.Handle("POST", PathAdminAddUpToContainer, handleAdminAuthMiddleware, addUpToContainer)
	e.Handle("POST", PathAdminUpMapToMcServer, handleAdminAuthMiddleware, UpMapToMcServer)
	e.Handle("POST", PathAdminCloseMcd, handleAdminAuthMiddleware, closeMcd)
}

// 返回数据格式化
func getAdminResponse(c *gin.Context, data interface{}) gin.H {
	responseData := make(map[string]interface{})
	code, ok := c.Get("code")
	if !ok {
		code = 0
	}
	msg, ok := c.Get("message")
	if !ok {
		msg = ""
	}
	responseData["code"] = code
	responseData["message"] = msg
	responseData["data"] = data
	return responseData
}

var (
	adminAuthMiddleware []gin.HandlerFunc
)

func RegisterAdminAuthMiddleware(f gin.HandlerFunc) {
	adminAuthMiddleware = append(adminAuthMiddleware, f)
}

func handleAdminAuthMiddleware(c *gin.Context) {
	for _, middleware := range adminAuthMiddleware {
		if c.IsAborted() {
			break
		}
		middleware(c)
	}
}

