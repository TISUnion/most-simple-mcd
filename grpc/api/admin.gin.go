// Code generated by protoc-gen-lightbrother, DO NOT EDIT.

/*
Package api is a generated gin stub package.
This code was generated with protoc-gen-lightbrother. 

It is generated from these files:
	admin.proto
*/
package api

import (
	"github.com/gin-gonic/gin"
	"context"
	"net/http"
)

// to suppressed 'imported but not used warning'

const HTTP_METGOD = "GRPC"

var PathAdminGetConfig = "/most.simple.mcd.Admin/getConfig"
var PathAdminUpdateConfig = "/most.simple.mcd.Admin/updateConfig"
var PathAdminOperatePlugin = "/most.simple.mcd.Admin/operatePlugin"
var PathAdminGetConfigVal = "/most.simple.mcd.Admin/getConfigVal"
var PathAdminRunCommand = "/most.simple.mcd.Admin/runCommand"
var PathAdminGetLog = "/most.simple.mcd.Admin/getLog"
var PathAdminDelTmpFlie = "/most.simple.mcd.Admin/delTmpFlie"
var PathAdminAddUpToContainer = "/most.simple.mcd.Admin/addUpToContainer"
var PathAdminCloseMcd = "/most.simple.mcd.Admin/closeMcd"

// AdminGinServer is the server API for Admin service.
type AdminGinServer interface {
	// 获取配置
	GetConfig(ctx context.Context, req *GetConfigReq) (resp *GetConfigResp, err error)

	// 修改配置
	UpdateConfig(ctx context.Context, req *UpdateConfigReq) (resp *UpdateConfigResp, err error)

	// 服务端插件操作
	OperatePlugin(ctx context.Context, req *OperatePluginReq) (resp *OperatePluginResp, err error)

	// 服务端插件操作
	GetConfigVal(ctx context.Context, req *GetConfigValReq) (resp *GetConfigValResp, err error)

	// 向服务端执行一条命令
	RunCommand(ctx context.Context, req *RunCommandReq) (resp *RunCommandResp, err error)

	// 获取服务端日志
	GetLog(ctx context.Context, req *GetLogReq) (resp *GetLogResp, err error)

	// 删除临时文件
	DelTmpFlie(ctx context.Context, req *DelTmpFlieReq) (resp *DelTmpFlieResp, err error)

	// 获取上传服务端文件，并注入到容器中
	AddUpToContainer(ctx context.Context, req *AddUpToContainerReq) (resp *AddUpToContainerResp, err error)

	CloseMcd(ctx context.Context, req *CloseMcdReq) (resp *CloseMcdResp, err error)
}

var apiAdminSvc AdminGinServer

func getConfig(c *gin.Context) {
	p := new(GetConfigResp)
	if err := c.BindJSON(p); err != nil {
		c.JSON(http.StatusInternalServerError, err)
	}
	resp, err := apiAdminSvc.GetConfig(c, p)
	if err != nil {
		c.JSON(http.StatusOK, getResponse(c, nil))
	}
	c.JSON(http.StatusOK, getResponse(c, resp))
}

func updateConfig(c *gin.Context) {
	p := new(UpdateConfigResp)
	if err := c.BindJSON(p); err != nil {
		c.JSON(http.StatusInternalServerError, err)
	}
	resp, err := apiAdminSvc.UpdateConfig(c, p)
	if err != nil {
		c.JSON(http.StatusOK, getResponse(c, nil))
	}
	c.JSON(http.StatusOK, getResponse(c, resp))
}

func operatePlugin(c *gin.Context) {
	p := new(OperatePluginResp)
	if err := c.BindJSON(p); err != nil {
		c.JSON(http.StatusInternalServerError, err)
	}
	resp, err := apiAdminSvc.OperatePlugin(c, p)
	if err != nil {
		c.JSON(http.StatusOK, getResponse(c, nil))
	}
	c.JSON(http.StatusOK, getResponse(c, resp))
}

func getConfigVal(c *gin.Context) {
	p := new(GetConfigValResp)
	if err := c.BindJSON(p); err != nil {
		c.JSON(http.StatusInternalServerError, err)
	}
	resp, err := apiAdminSvc.GetConfigVal(c, p)
	if err != nil {
		c.JSON(http.StatusOK, getResponse(c, nil))
	}
	c.JSON(http.StatusOK, getResponse(c, resp))
}

func runCommand(c *gin.Context) {
	p := new(RunCommandResp)
	if err := c.BindJSON(p); err != nil {
		c.JSON(http.StatusInternalServerError, err)
	}
	resp, err := apiAdminSvc.RunCommand(c, p)
	if err != nil {
		c.JSON(http.StatusOK, getResponse(c, nil))
	}
	c.JSON(http.StatusOK, getResponse(c, resp))
}

func getLog(c *gin.Context) {
	p := new(GetLogResp)
	if err := c.BindJSON(p); err != nil {
		c.JSON(http.StatusInternalServerError, err)
	}
	resp, err := apiAdminSvc.GetLog(c, p)
	if err != nil {
		c.JSON(http.StatusOK, getResponse(c, nil))
	}
	c.JSON(http.StatusOK, getResponse(c, resp))
}

func delTmpFlie(c *gin.Context) {
	p := new(DelTmpFlieResp)
	if err := c.BindJSON(p); err != nil {
		c.JSON(http.StatusInternalServerError, err)
	}
	resp, err := apiAdminSvc.DelTmpFlie(c, p)
	if err != nil {
		c.JSON(http.StatusOK, getResponse(c, nil))
	}
	c.JSON(http.StatusOK, getResponse(c, resp))
}

func addUpToContainer(c *gin.Context) {
	p := new(AddUpToContainerResp)
	if err := c.BindJSON(p); err != nil {
		c.JSON(http.StatusInternalServerError, err)
	}
	resp, err := apiAdminSvc.AddUpToContainer(c, p)
	if err != nil {
		c.JSON(http.StatusOK, getResponse(c, nil))
	}
	c.JSON(http.StatusOK, getResponse(c, resp))
}

func closeMcd(c *gin.Context) {
	p := new(CloseMcdResp)
	if err := c.BindJSON(p); err != nil {
		c.JSON(http.StatusInternalServerError, err)
	}
	resp, err := apiAdminSvc.CloseMcd(c, p)
	if err != nil {
		c.JSON(http.StatusOK, getResponse(c, nil))
	}
	c.JSON(http.StatusOK, getResponse(c, resp))
}

func RegisterAdminAdminGinServer(e *gin.Engine, server AdminGinServer) {
	apiAdminSvc = server
	e.Handle(HTTP_METGOD, PathAdminGetConfig, handleAdminAuthMiddleware, getConfig)
	e.Handle(HTTP_METGOD, PathAdminUpdateConfig, handleAdminAuthMiddleware, updateConfig)
	e.Handle(HTTP_METGOD, PathAdminOperatePlugin, handleAdminAuthMiddleware, operatePlugin)
	e.Handle(HTTP_METGOD, PathAdminGetConfigVal, handleAdminAuthMiddleware, getConfigVal)
	e.Handle(HTTP_METGOD, PathAdminRunCommand, handleAdminAuthMiddleware, runCommand)
	e.Handle(HTTP_METGOD, PathAdminGetLog, handleAdminAuthMiddleware, getLog)
	e.Handle(HTTP_METGOD, PathAdminDelTmpFlie, handleAdminAuthMiddleware, delTmpFlie)
	e.Handle(HTTP_METGOD, PathAdminAddUpToContainer, handleAdminAuthMiddleware, addUpToContainer)
	e.Handle(HTTP_METGOD, PathAdminCloseMcd, handleAdminAuthMiddleware, closeMcd)
}

// 返回数据格式化
func getResponse(c *gin.Context, data interface{}) gin.H {
	code, ok := c.Get("code")
	if !ok {
		code = 0
	}
	msg, ok := c.Get("message")
	if !ok {
		msg = ""
	}
	responseData["code"] = code
	responseData["message"] = msg
	responseData["data"] = data
	return responseData
}
var (
	adminAuthMiddleware []gin.HandlerFunc
)

func RegisterAdminAuthMiddleware(f gin.HandlerFunc) {
	adminAuthMiddleware = append(adminAuthMiddleware, f)
}

func handleAdminAuthMiddleware(c *gin.Context) {
	for _, middleware := range adminAuthMiddleware {
		if c.IsAborted() {
			break
		}
		middleware(c)
	}
}

